@using DragAndDropProject.Models

<h3>Skapa nya boxar:</h3>
<button @onclick="ToggleButtonsVisibility">
    @(showButtons ? "Dölj Knappar" : "Visa Knappar")
</button>

@if (showButtons)
{
    <button @onclick="AddTextModel">Lägg till Text Box</button>
    <button @onclick="AddImageModel">Lägg till Image Box</button>
    <button @onclick="AddContainer">Lägg till Container</button>
    <button @onclick="ClearAll">Rensa Alla Boxar</button>
}

<ul class="box-list">
    @foreach (var box in boxes)
    {
        @RenderContentItem(box, null) // Första nivån har ingen parent, därav 'null'
    }
</ul>

@code {
    [Parameter]
    public EventCallback<ContentModel> OnBoxSelected { get; set; }

    private List<ContentModel> boxes = new List<ContentModel>();
    private List<SectionModel> containers = new List<SectionModel>();
    private int nextId = 1; // Startar från 1 för enklare nummer
    private bool showButtons = true;

    protected override void OnInitialized()
    {
        // Lägg till några förvalda boxar och containrar
        boxes.Add(new TextModel { Id = nextId++, Text = "Text Box 1" });
        boxes.Add(new ImageModel { Id = nextId++, ImageUrl = "https://via.placeholder.com/100" });
        boxes.Add(new TextModel { Id = nextId++, Text = "Text Box 2" });
        boxes.Add(new ImageModel { Id = nextId++, ImageUrl = "https://via.placeholder.com/100" });

        // Startar containrar med unika ID:n
        containers.Add(new SectionModel { Id = nextId++, Title = "Container 1", InnerBoxes = new List<ContentModel>() });
        containers.Add(new SectionModel { Id = nextId++, Title = "Container 2", InnerBoxes = new List<ContentModel>() });
    }

     private void ClearAll()
    {
        boxes.Clear(); // Rensa alla boxar
        containers.Clear(); // Rensa alla containrar
        nextId = 1; // Återställ ID-tellern om du vill börja om från början
    }

    private void ToggleButtonsVisibility()
    {
        showButtons = !showButtons;
    }

    private void AddTextModel()
    {
        boxes.Add(new TextModel { Id = nextId++, Text = $"Text Box {nextId}" });
    }

    private void AddImageModel()
    {
        boxes.Add(new ImageModel { Id = nextId++, ImageUrl = "https://via.placeholder.com/100" });
    }

    private void AddContainer()
    {
        var newContainer = new SectionModel { Id = nextId++, Title = $"Container {nextId - 1}", InnerBoxes = new List<ContentModel>() };
        boxes.Add(newContainer);
        containers.Add(newContainer);
    }

private RenderFragment RenderContentItem(ContentModel box, SectionModel? parentContainer) => @<li>
    <div @onclick="() => HandleImageClick(box)" style="text-align:@box.TextAlign;"> <!-- Apply text alignment -->
        @if (box is TextModel textModel)
        {
            <span>@textModel.Text</span>
        }
        else if (box is ImageModel imageModel)
        {
            <img src="@imageModel.ImageUrl" alt="Image" style="width:100px;height:100px;" />
        }
    </div>

    @if (box.IsEditing)
    {
        <button @onclick="() => Changes(box)">Ändra</button>
        <button @onclick="() => Save(box)">Spara</button>
    }
    else
    {
        // Display only when not in edit mode
        @if (box.ShowEditButton)
        {
            <button @onclick="() => ToggleEdit(box)">Spara</button>;
            <div>
                @if (parentContainer == null) // Only for top level
                {
                    <select @onchange="(e) => ChangeTextAlign(box, e)" value="@box.TextAlign"> <!-- Dropdown for text alignment -->
                        <option value="left">Vänster</option>
                        <option value="center">Center</option>
                        <option value="right">Höger</option>
                    </select>

                    <button @onclick="() => MoveBoxUp(box)">Flytta upp</button>
                    <button @onclick="() => MoveBoxDown(box)">Flytta ner</button>
                    <button @onclick="() => RemoveBox(box)">Ta bort box</button>
                }
                else // Inner boxes
                {
                    <button @onclick="() => MoveInnerUp(box, parentContainer)">Flytta upp</button>
                    <button @onclick="() => MoveInnerDown(box, parentContainer)">Flytta ner</button>
                    <button @onclick="() => RemoveInnerBox(box, parentContainer)">Ta bort box</button>
                    
                    <!-- Dropdown for text alignment -->
                    <select @onchange="(e) => ChangeTextAlign(box, e)" value="@box.TextAlign"> 
                        <option value="left">Vänster</option>
                        <option value="center">Center</option>
                        <option value="right">Höger</option>
                    </select>
                    
                    <!-- Dropdown for selecting container -->
                    <select @onchange="(e) => ChangeContainer(box, e)" value="@box.SelectedContainerId">
                        <option value="">Välj Container</option>
                        @foreach (var c in containers)
                        {
                            <option value="@c.Id">@c.Title</option> <!-- Only the title is displayed -->
                        }
                    </select>
                }
            </div>
        }
    }

    @if (box is SectionModel container)
    {
        <ul>
            @foreach (var innerBox in container.InnerBoxes)
            {
                @RenderContentItem(innerBox, container) // Pass container for inner boxes
            }
        </ul>

        @if (showButtons) // Check if the main buttons are visible
        {
            <button @onclick="() => AddInnerTextModel(container)">Lägg till Text Box i Container</button>
            <button @onclick="() => AddInnerImageModel(container)">Lägg till Image Box i Container</button>
            <button @onclick="() => RemoveContainer(container)">Ta bort Container</button> <!-- New button to remove the container -->
            <button @onclick="() => ClearContainer(container)">Rensa Innehåll</button> <!-- New button to clear the container's content -->
            <p>Container ID: @container.Id</p> <!-- Show container ID -->
            <div>
                <button @onclick="() => MoveContainerUp(container)">Flytta Container Upp</button>
                <button @onclick="() => MoveContainerDown(container)">Flytta Container Ner</button>
            </div>
        }
    }
</li>;



    private void ChangeTextAlign(ContentModel box, ChangeEventArgs e)
    {
        box.TextAlign = e.Value.ToString(); // Update text alignment based on the selected value
    }


    private void HandleImageClick(ContentModel box)
    {
        // Kontrollera om boxen redan är i redigeringsläge
        if (box.IsEditing)
        {
            return; // Gör ingenting om den redan är i redigeringsläge
        }
        ToggleEdit(box); // Annars aktivera redigering
    }

    private void ToggleEdit(ContentModel box)
    {
        box.IsEditing = !box.IsEditing; // Växlar redigeringstillståndet
        if (box is TextModel || box is ImageModel) 
        {
            // Visa "Ändra"-knappen om redigering är aktiverad
            box.ShowEditButton = !box.IsEditing;
        }
    }

    private void Save(ContentModel box)
    {
        // Toggle back to original view
        box.IsEditing = false; // Set editing to false
        box.ShowEditButton = false; // Hide the edit button since we're toggling back
    }

    private void Changes(ContentModel box)
    {
        // Implement your save logic here, e.g., updating the model or saving changes
        box.IsEditing = false; // Set editing to false after saving
        box.ShowEditButton = true; // Show "Ändra" button again after saving
    }

    private void AddInnerTextModel(SectionModel container)
    {
        container.InnerBoxes.Add(new TextModel { Id = nextId++, Text = $"Inner Text Model {nextId}" });
    }

    private void AddInnerImageModel(SectionModel container)
    {
        container.InnerBoxes.Add(new ImageModel { Id = nextId++, ImageUrl = "https://via.placeholder.com/100" });
    }

    private void MoveBoxUp(ContentModel box)
    {
        int index = boxes.IndexOf(box);
        if (index > 0)
        {
            boxes.RemoveAt(index);
            boxes.Insert(index - 1, box);
        }
    }

    private void MoveBoxDown(ContentModel box)
    {
        int index = boxes.IndexOf(box);
        if (index >= 0 && index < boxes.Count - 1)
        {
            boxes.RemoveAt(index);
            boxes.Insert(index + 1, box);
        }
    }

    private void MoveContainerUp(SectionModel container)
    {
        int index = boxes.IndexOf(container);
        if (index > 0)
        {
            boxes.RemoveAt(index);
            boxes.Insert(index - 1, container);
        }
    }

    private void MoveContainerDown(SectionModel container)
    {
        int index = boxes.IndexOf(container);
        if (index >= 0 && index < boxes.Count - 1)
        {
            boxes.RemoveAt(index);
            boxes.Insert(index + 1, container);
        }
    }

    private void MoveInnerUp(ContentModel box, SectionModel parentContainer)
    {
        int index = parentContainer.InnerBoxes.IndexOf(box);
        if (index > 0)
        {
            parentContainer.InnerBoxes.RemoveAt(index);
            parentContainer.InnerBoxes.Insert(index - 1, box);
        }
    }

    private void MoveInnerDown(ContentModel box, SectionModel parentContainer)
    {
        int index = parentContainer.InnerBoxes.IndexOf(box);
        if (index >= 0 && index < parentContainer.InnerBoxes.Count - 1)
        {
            parentContainer.InnerBoxes.RemoveAt(index);
            parentContainer.InnerBoxes.Insert(index + 1, box);
        }
    }

    private void RemoveBox(ContentModel box)
    {
        boxes.Remove(box);
    }

    private void RemoveInnerBox(ContentModel box, SectionModel parentContainer)
    {
        parentContainer.InnerBoxes.Remove(box);
    }

    private void RemoveContainer(SectionModel container)
    {
        boxes.Remove(container);
        containers.Remove(container);
    }

    private void ClearContainer(SectionModel container)
    {
        container.InnerBoxes.Clear(); // Rensa alla inre boxar
    }

     private void ChangeContainer(ContentModel box, ChangeEventArgs e)
    {
        var selectedContainerIdStr = e.Value?.ToString();
        if (string.IsNullOrEmpty(selectedContainerIdStr))
        {
            return; // Avbryt om inget värde är valt
        }

        int selectedContainerId = int.Parse(selectedContainerIdStr);
        var targetContainer = containers.FirstOrDefault(c => c.Id == selectedContainerId);

        SectionModel currentContainer = containers.FirstOrDefault(c => c.InnerBoxes.Contains(box));

        if (targetContainer != null && !(box is SectionModel))
        {
            if (currentContainer != null)
            {
                currentContainer.InnerBoxes.Remove(box);
            }

            targetContainer.InnerBoxes.Add(box);
            box.SelectedContainerId = targetContainer.Id; // Uppdatera vald container ID

            StateHasChanged(); // Uppdatera UI
        }
    }
}
